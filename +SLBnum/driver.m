%
% Status : main Dynare file
%
% Warning : this file is generated automatically by Dynare
%           from model file (.mod)

clearvars -global
clear_persistent_variables(fileparts(which('dynare')), false)
tic0 = tic;
% Define global variables.
global M_ options_ oo_ estim_params_ bayestopt_ dataset_ dataset_info estimation_info
options_ = [];
M_.fname = 'SLBnum';
M_.dynare_version = '6.2';
oo_.dynare_version = '6.2';
options_.dynare_version = '6.2';
%
% Some global variables initialization
%
global_initialization;
M_.exo_names = cell(11,1);
M_.exo_names_tex = cell(11,1);
M_.exo_names_long = cell(11,1);
M_.exo_names(1) = {'eta_a'};
M_.exo_names_tex(1) = {'eta\_a'};
M_.exo_names_long(1) = {'eta_a'};
M_.exo_names(2) = {'eta_g'};
M_.exo_names_tex(2) = {'eta\_g'};
M_.exo_names_long(2) = {'eta_g'};
M_.exo_names(3) = {'eta_c'};
M_.exo_names_tex(3) = {'eta\_c'};
M_.exo_names_long(3) = {'eta_c'};
M_.exo_names(4) = {'eta_m'};
M_.exo_names_tex(4) = {'eta\_m'};
M_.exo_names_long(4) = {'eta_m'};
M_.exo_names(5) = {'eta_i'};
M_.exo_names_tex(5) = {'eta\_i'};
M_.exo_names_long(5) = {'eta_i'};
M_.exo_names(6) = {'eta_r'};
M_.exo_names_tex(6) = {'eta\_r'};
M_.exo_names_long(6) = {'eta_r'};
M_.exo_names(7) = {'eta_t'};
M_.exo_names_tex(7) = {'eta\_t'};
M_.exo_names_long(7) = {'eta_t'};
M_.exo_names(8) = {'eta_p'};
M_.exo_names_tex(8) = {'eta\_p'};
M_.exo_names_long(8) = {'eta_p'};
M_.exo_names(9) = {'eta_s'};
M_.exo_names_tex(9) = {'eta\_s'};
M_.exo_names_long(9) = {'eta_s'};
M_.exo_names(10) = {'eta_mmu'};
M_.exo_names_tex(10) = {'eta\_mmu'};
M_.exo_names_long(10) = {'eta_mmu'};
M_.exo_names(11) = {'eta_ms'};
M_.exo_names_tex(11) = {'eta\_ms'};
M_.exo_names_long(11) = {'eta_ms'};
M_.endo_names = cell(43,1);
M_.endo_names_tex = cell(43,1);
M_.endo_names_long = cell(43,1);
M_.endo_names(1) = {'rr'};
M_.endo_names_tex(1) = {'rr'};
M_.endo_names_long(1) = {'rr'};
M_.endo_names(2) = {'c'};
M_.endo_names_tex(2) = {'c'};
M_.endo_names_long(2) = {'c'};
M_.endo_names(3) = {'c_E'};
M_.endo_names_tex(3) = {'c\_E'};
M_.endo_names_long(3) = {'c_E'};
M_.endo_names(4) = {'c_H'};
M_.endo_names_tex(4) = {'c\_H'};
M_.endo_names_long(4) = {'c_H'};
M_.endo_names(5) = {'h'};
M_.endo_names_tex(5) = {'h'};
M_.endo_names_long(5) = {'h'};
M_.endo_names(6) = {'w'};
M_.endo_names_tex(6) = {'w'};
M_.endo_names_long(6) = {'w'};
M_.endo_names(7) = {'y'};
M_.endo_names_tex(7) = {'y'};
M_.endo_names_long(7) = {'y'};
M_.endo_names(8) = {'k'};
M_.endo_names_tex(8) = {'k'};
M_.endo_names_long(8) = {'k'};
M_.endo_names(9) = {'i'};
M_.endo_names_tex(9) = {'i'};
M_.endo_names_long(9) = {'i'};
M_.endo_names(10) = {'l'};
M_.endo_names_tex(10) = {'l'};
M_.endo_names_long(10) = {'l'};
M_.endo_names(11) = {'lb_E'};
M_.endo_names_tex(11) = {'lb\_E'};
M_.endo_names_long(11) = {'lb_E'};
M_.endo_names(12) = {'phi_E'};
M_.endo_names_tex(12) = {'phi\_E'};
M_.endo_names_long(12) = {'phi_E'};
M_.endo_names(13) = {'mc'};
M_.endo_names_tex(13) = {'mc'};
M_.endo_names_long(13) = {'mc'};
M_.endo_names(14) = {'pi'};
M_.endo_names_tex(14) = {'pi'};
M_.endo_names_long(14) = {'pi'};
M_.endo_names(15) = {'r'};
M_.endo_names_tex(15) = {'r'};
M_.endo_names_long(15) = {'r'};
M_.endo_names(16) = {'lb_H'};
M_.endo_names_tex(16) = {'lb\_H'};
M_.endo_names_long(16) = {'lb_H'};
M_.endo_names(17) = {'q'};
M_.endo_names_tex(17) = {'q'};
M_.endo_names_long(17) = {'q'};
M_.endo_names(18) = {'varrho'};
M_.endo_names_tex(18) = {'varrho'};
M_.endo_names_long(18) = {'varrho'};
M_.endo_names(19) = {'tau'};
M_.endo_names_tex(19) = {'tau'};
M_.endo_names_long(19) = {'tau'};
M_.endo_names(20) = {'mu'};
M_.endo_names_tex(20) = {'mu'};
M_.endo_names_long(20) = {'mu'};
M_.endo_names(21) = {'e'};
M_.endo_names_tex(21) = {'e'};
M_.endo_names_long(21) = {'e'};
M_.endo_names(22) = {'g'};
M_.endo_names_tex(22) = {'g'};
M_.endo_names_long(22) = {'g'};
M_.endo_names(23) = {'gy_obs'};
M_.endo_names_tex(23) = {'gy\_obs'};
M_.endo_names_long(23) = {'gy_obs'};
M_.endo_names(24) = {'gc_obs'};
M_.endo_names_tex(24) = {'gc\_obs'};
M_.endo_names_long(24) = {'gc_obs'};
M_.endo_names(25) = {'gi_obs'};
M_.endo_names_tex(25) = {'gi\_obs'};
M_.endo_names_long(25) = {'gi_obs'};
M_.endo_names(26) = {'pi_obs'};
M_.endo_names_tex(26) = {'pi\_obs'};
M_.endo_names_long(26) = {'pi_obs'};
M_.endo_names(27) = {'r_obs'};
M_.endo_names_tex(27) = {'r\_obs'};
M_.endo_names_long(27) = {'r_obs'};
M_.endo_names(28) = {'l_obs'};
M_.endo_names_tex(28) = {'l\_obs'};
M_.endo_names_long(28) = {'l_obs'};
M_.endo_names(29) = {'b_s'};
M_.endo_names_tex(29) = {'b\_s'};
M_.endo_names_long(29) = {'b_s'};
M_.endo_names(30) = {'r_s'};
M_.endo_names_tex(30) = {'r\_s'};
M_.endo_names_long(30) = {'r_s'};
M_.endo_names(31) = {'rrs'};
M_.endo_names_tex(31) = {'rrs'};
M_.endo_names_long(31) = {'rrs'};
M_.endo_names(32) = {'phiS'};
M_.endo_names_tex(32) = {'phiS'};
M_.endo_names_long(32) = {'phiS'};
M_.endo_names(33) = {'e_a'};
M_.endo_names_tex(33) = {'e\_a'};
M_.endo_names_long(33) = {'e_a'};
M_.endo_names(34) = {'e_g'};
M_.endo_names_tex(34) = {'e\_g'};
M_.endo_names_long(34) = {'e_g'};
M_.endo_names(35) = {'e_c'};
M_.endo_names_tex(35) = {'e\_c'};
M_.endo_names_long(35) = {'e_c'};
M_.endo_names(36) = {'e_m'};
M_.endo_names_tex(36) = {'e\_m'};
M_.endo_names_long(36) = {'e_m'};
M_.endo_names(37) = {'e_i'};
M_.endo_names_tex(37) = {'e\_i'};
M_.endo_names_long(37) = {'e_i'};
M_.endo_names(38) = {'e_r'};
M_.endo_names_tex(38) = {'e\_r'};
M_.endo_names_long(38) = {'e_r'};
M_.endo_names(39) = {'e_t'};
M_.endo_names_tex(39) = {'e\_t'};
M_.endo_names_long(39) = {'e_t'};
M_.endo_names(40) = {'e_p'};
M_.endo_names_tex(40) = {'e\_p'};
M_.endo_names_long(40) = {'e_p'};
M_.endo_names(41) = {'e_s'};
M_.endo_names_tex(41) = {'e\_s'};
M_.endo_names_long(41) = {'e_s'};
M_.endo_names(42) = {'e_mmu'};
M_.endo_names_tex(42) = {'e\_mmu'};
M_.endo_names_long(42) = {'e_mmu'};
M_.endo_names(43) = {'e_ms'};
M_.endo_names_tex(43) = {'e\_ms'};
M_.endo_names_long(43) = {'e_ms'};
M_.endo_partitions = struct();
M_.param_names = cell(44,1);
M_.param_names_tex = cell(44,1);
M_.param_names_long = cell(44,1);
M_.param_names(1) = {'beta_E'};
M_.param_names_tex(1) = {'beta\_E'};
M_.param_names_long(1) = {'beta_E'};
M_.param_names(2) = {'beta_H'};
M_.param_names_tex(2) = {'beta\_H'};
M_.param_names_long(2) = {'beta_H'};
M_.param_names(3) = {'delta'};
M_.param_names_tex(3) = {'delta'};
M_.param_names_long(3) = {'delta'};
M_.param_names(4) = {'alpha'};
M_.param_names_tex(4) = {'alpha'};
M_.param_names_long(4) = {'alpha'};
M_.param_names(5) = {'sigmaC'};
M_.param_names_tex(5) = {'sigmaC'};
M_.param_names_long(5) = {'sigmaC'};
M_.param_names(6) = {'sigmaL'};
M_.param_names_tex(6) = {'sigmaL'};
M_.param_names_long(6) = {'sigmaL'};
M_.param_names(7) = {'chi_l'};
M_.param_names_tex(7) = {'chi\_l'};
M_.param_names_long(7) = {'chi_l'};
M_.param_names(8) = {'gy'};
M_.param_names_tex(8) = {'gy'};
M_.param_names_long(8) = {'gy'};
M_.param_names(9) = {'A'};
M_.param_names_tex(9) = {'A'};
M_.param_names_long(9) = {'A'};
M_.param_names(10) = {'mh'};
M_.param_names_tex(10) = {'mh'};
M_.param_names_long(10) = {'mh'};
M_.param_names(11) = {'mk'};
M_.param_names_tex(11) = {'mk'};
M_.param_names_long(11) = {'mk'};
M_.param_names(12) = {'hh'};
M_.param_names_tex(12) = {'hh'};
M_.param_names_long(12) = {'hh'};
M_.param_names(13) = {'epsilon'};
M_.param_names_tex(13) = {'epsilon'};
M_.param_names_long(13) = {'epsilon'};
M_.param_names(14) = {'kappa'};
M_.param_names_tex(14) = {'kappa'};
M_.param_names_long(14) = {'kappa'};
M_.param_names(15) = {'rho'};
M_.param_names_tex(15) = {'rho'};
M_.param_names_long(15) = {'rho'};
M_.param_names(16) = {'phi_y'};
M_.param_names_tex(16) = {'phi\_y'};
M_.param_names_long(16) = {'phi_y'};
M_.param_names(17) = {'phi_pi'};
M_.param_names_tex(17) = {'phi\_pi'};
M_.param_names_long(17) = {'phi_pi'};
M_.param_names(18) = {'psi'};
M_.param_names_tex(18) = {'psi'};
M_.param_names_long(18) = {'psi'};
M_.param_names(19) = {'piss'};
M_.param_names_tex(19) = {'piss'};
M_.param_names_long(19) = {'piss'};
M_.param_names(20) = {'rho_a'};
M_.param_names_tex(20) = {'rho\_a'};
M_.param_names_long(20) = {'rho_a'};
M_.param_names(21) = {'rho_g'};
M_.param_names_tex(21) = {'rho\_g'};
M_.param_names_long(21) = {'rho_g'};
M_.param_names(22) = {'rho_c'};
M_.param_names_tex(22) = {'rho\_c'};
M_.param_names_long(22) = {'rho_c'};
M_.param_names(23) = {'rho_m'};
M_.param_names_tex(23) = {'rho\_m'};
M_.param_names_long(23) = {'rho_m'};
M_.param_names(24) = {'rho_i'};
M_.param_names_tex(24) = {'rho\_i'};
M_.param_names_long(24) = {'rho_i'};
M_.param_names(25) = {'rho_r'};
M_.param_names_tex(25) = {'rho\_r'};
M_.param_names_long(25) = {'rho_r'};
M_.param_names(26) = {'rho_t'};
M_.param_names_tex(26) = {'rho\_t'};
M_.param_names_long(26) = {'rho_t'};
M_.param_names(27) = {'rho_p'};
M_.param_names_tex(27) = {'rho\_p'};
M_.param_names_long(27) = {'rho_p'};
M_.param_names(28) = {'sig'};
M_.param_names_tex(28) = {'sig'};
M_.param_names_long(28) = {'sig'};
M_.param_names(29) = {'theta1'};
M_.param_names_tex(29) = {'theta1'};
M_.param_names_long(29) = {'theta1'};
M_.param_names(30) = {'theta2'};
M_.param_names_tex(30) = {'theta2'};
M_.param_names_long(30) = {'theta2'};
M_.param_names(31) = {'varphi'};
M_.param_names_tex(31) = {'varphi'};
M_.param_names_long(31) = {'varphi'};
M_.param_names(32) = {'tau0'};
M_.param_names_tex(32) = {'tau0'};
M_.param_names_long(32) = {'tau0'};
M_.param_names(33) = {'y0'};
M_.param_names_tex(33) = {'y0'};
M_.param_names_long(33) = {'y0'};
M_.param_names(34) = {'stepup'};
M_.param_names_tex(34) = {'stepup'};
M_.param_names_long(34) = {'stepup'};
M_.param_names(35) = {'p_s'};
M_.param_names_tex(35) = {'p\_s'};
M_.param_names_long(35) = {'p_s'};
M_.param_names(36) = {'gamma'};
M_.param_names_tex(36) = {'gamma'};
M_.param_names_long(36) = {'gamma'};
M_.param_names(37) = {'chi_s'};
M_.param_names_tex(37) = {'chi\_s'};
M_.param_names_long(37) = {'chi_s'};
M_.param_names(38) = {'sigmaS'};
M_.param_names_tex(38) = {'sigmaS'};
M_.param_names_long(38) = {'sigmaS'};
M_.param_names(39) = {'rho_s'};
M_.param_names_tex(39) = {'rho\_s'};
M_.param_names_long(39) = {'rho_s'};
M_.param_names(40) = {'BDratio'};
M_.param_names_tex(40) = {'BDratio'};
M_.param_names_long(40) = {'BDratio'};
M_.param_names(41) = {'mmu'};
M_.param_names_tex(41) = {'mmu'};
M_.param_names_long(41) = {'mmu'};
M_.param_names(42) = {'rho_mmu'};
M_.param_names_tex(42) = {'rho\_mmu'};
M_.param_names_long(42) = {'rho_mmu'};
M_.param_names(43) = {'ms'};
M_.param_names_tex(43) = {'ms'};
M_.param_names_long(43) = {'ms'};
M_.param_names(44) = {'rho_ms'};
M_.param_names_tex(44) = {'rho\_ms'};
M_.param_names_long(44) = {'rho_ms'};
M_.param_partitions = struct();
M_.exo_det_nbr = 0;
M_.exo_nbr = 11;
M_.endo_nbr = 43;
M_.param_nbr = 44;
M_.orig_endo_nbr = 43;
M_.aux_vars = [];
options_.varobs = cell(6, 1);
options_.varobs(1)  = {'gy_obs'};
options_.varobs(2)  = {'pi_obs'};
options_.varobs(3)  = {'r_obs'};
options_.varobs(4)  = {'gc_obs'};
options_.varobs(5)  = {'gi_obs'};
options_.varobs(6)  = {'l_obs'};
options_.varobs_id = [ 23 26 27 24 25 28  ];
M_.Sigma_e = zeros(11, 11);
M_.Correlation_matrix = eye(11, 11);
M_.H = 0;
M_.Correlation_matrix_ME = 1;
M_.sigma_e_is_diagonal = true;
M_.det_shocks = [];
M_.surprise_shocks = [];
M_.learnt_shocks = [];
M_.learnt_endval = [];
M_.heteroskedastic_shocks.Qvalue_orig = [];
M_.heteroskedastic_shocks.Qscale_orig = [];
M_.matched_irfs = {};
M_.matched_irfs_weights = {};
options_.linear = false;
options_.block = false;
options_.bytecode = false;
options_.use_dll = false;
options_.ramsey_policy = false;
options_.discretionary_policy = false;
M_.eq_nbr = 43;
M_.ramsey_orig_eq_nbr = 0;
M_.ramsey_orig_endo_nbr = 0;
M_.set_auxiliary_variables = exist(['./+' M_.fname '/set_auxiliary_variables.m'], 'file') == 2;
M_.epilogue_names = {};
M_.epilogue_var_list_ = {};
M_.orig_maximum_endo_lag = 1;
M_.orig_maximum_endo_lead = 1;
M_.orig_maximum_exo_lag = 0;
M_.orig_maximum_exo_lead = 0;
M_.orig_maximum_exo_det_lag = 0;
M_.orig_maximum_exo_det_lead = 0;
M_.orig_maximum_lag = 1;
M_.orig_maximum_lead = 1;
M_.orig_maximum_lag_with_diffs_expanded = 1;
M_.lead_lag_incidence = [
 0 22 0;
 1 23 0;
 2 24 0;
 3 25 0;
 0 26 0;
 0 27 0;
 4 28 65;
 5 29 0;
 6 30 66;
 7 31 0;
 0 32 67;
 0 33 0;
 0 34 0;
 0 35 68;
 8 36 0;
 0 37 69;
 0 38 70;
 0 39 71;
 0 40 0;
 0 41 0;
 0 42 0;
 0 43 0;
 0 44 0;
 0 45 0;
 0 46 0;
 0 47 0;
 0 48 0;
 0 49 0;
 9 50 0;
 10 51 72;
 0 52 0;
 0 53 0;
 11 54 0;
 12 55 0;
 13 56 0;
 14 57 0;
 15 58 73;
 16 59 0;
 17 60 0;
 18 61 0;
 19 62 0;
 20 63 0;
 21 64 0;]';
M_.nstatic = 17;
M_.nfwrd   = 5;
M_.npred   = 17;
M_.nboth   = 4;
M_.nsfwrd   = 9;
M_.nspred   = 21;
M_.ndynamic   = 26;
M_.dynamic_tmp_nbr = [26; 6; 0; 0; ];
M_.equations_tags = {
  1 , 'name' , 'marginal utility of consumption' ;
  2 , 'name' , 'Euler' ;
  3 , 'name' , 'Labor Supply' ;
  4 , 'name' , 'FOC i' ;
  5 , 'name' , 'Euler SLBs (b_s)' ;
  6 , 'name' , 'technology' ;
  7 , 'name' , 'Borrowing constraint' ;
  8 , 'name' , 'Capital law of motion' ;
  9 , 'name' , 'FOC c' ;
  10 , 'name' , 'FOC l' ;
  11 , 'name' , 'FOC k' ;
  12 , 'name' , 'FOC h' ;
  13 , 'name' , 'NKPC' ;
  14 , 'name' , 'FOC y' ;
  15 , 'name' , 'FOC mu' ;
  16 , 'name' , 'FOC for entrepreneur SLB (b_s_E)' ;
  17 , 'name' , 'balance sheet' ;
  18 , 'name' , 'Resources Constraint' ;
  19 , 'name' , 'Total consumption' ;
  20 , 'name' , 'Total emissions' ;
  21 , 'name' , 'Fisherian equation' ;
  22 , 'name' , 'Fisherian equation for SLB' ;
  23 , 'name' , 'Sustainium equation' ;
  24 , 'name' , 'Monetary Policy rule' ;
  25 , 'name' , 'Public spending' ;
  26 , 'name' , 'Carbon tax' ;
  27 , 'name' , 'measurement GDP' ;
  28 , 'name' , 'measurement consumption' ;
  29 , 'name' , 'measurement investment' ;
  30 , 'name' , 'measurement inflation' ;
  31 , 'name' , 'measurement interest rate' ;
  32 , 'name' , 'measurement corporate loans' ;
  33 , 'name' , 'shocks' ;
  34 , 'name' , '34' ;
  35 , 'name' , '35' ;
  36 , 'name' , '36' ;
  37 , 'name' , '37' ;
  38 , 'name' , '38' ;
  39 , 'name' , '39' ;
  40 , 'name' , '40' ;
  41 , 'name' , '41' ;
  42 , 'name' , '42' ;
  43 , 'name' , '43' ;
};
M_.mapping.rr.eqidx = [2 7 10 11 21 ];
M_.mapping.c.eqidx = [18 19 28 ];
M_.mapping.c_E.eqidx = [9 17 19 ];
M_.mapping.c_H.eqidx = [1 19 ];
M_.mapping.h.eqidx = [3 6 7 12 17 ];
M_.mapping.w.eqidx = [3 7 12 17 ];
M_.mapping.y.eqidx = [6 11 12 13 14 15 17 18 20 24 25 27 ];
M_.mapping.k.eqidx = [6 7 8 11 ];
M_.mapping.i.eqidx = [4 8 17 18 29 ];
M_.mapping.l.eqidx = [7 17 32 ];
M_.mapping.lb_E.eqidx = [4 9 10 13 16 ];
M_.mapping.phi_E.eqidx = [10 11 12 ];
M_.mapping.mc.eqidx = [13 14 17 ];
M_.mapping.pi.eqidx = [5 13 17 18 21 22 24 30 ];
M_.mapping.r.eqidx = [17 21 23 24 31 ];
M_.mapping.lb_H.eqidx = [1 2 3 5 ];
M_.mapping.q.eqidx = [4 7 11 ];
M_.mapping.varrho.eqidx = [11 12 14 ];
M_.mapping.tau.eqidx = [14 15 17 26 ];
M_.mapping.mu.eqidx = [14 15 17 18 20 ];
M_.mapping.e.eqidx = [17 20 ];
M_.mapping.g.eqidx = [18 25 ];
M_.mapping.gy_obs.eqidx = [27 ];
M_.mapping.gc_obs.eqidx = [28 ];
M_.mapping.gi_obs.eqidx = [29 ];
M_.mapping.pi_obs.eqidx = [30 ];
M_.mapping.r_obs.eqidx = [31 ];
M_.mapping.l_obs.eqidx = [32 ];
M_.mapping.b_s.eqidx = [5 17 ];
M_.mapping.r_s.eqidx = [5 11 17 22 23 ];
M_.mapping.rrs.eqidx = [16 22 ];
M_.mapping.phiS.eqidx = [11 15 16 ];
M_.mapping.e_a.eqidx = [6 33 ];
M_.mapping.e_g.eqidx = [25 34 ];
M_.mapping.e_c.eqidx = [1 9 35 ];
M_.mapping.e_m.eqidx = [7 11 38 ];
M_.mapping.e_i.eqidx = [4 8 37 ];
M_.mapping.e_r.eqidx = [24 39 ];
M_.mapping.e_t.eqidx = [26 40 ];
M_.mapping.e_p.eqidx = [36 ];
M_.mapping.e_s.eqidx = [5 41 ];
M_.mapping.e_mmu.eqidx = [42 ];
M_.mapping.e_ms.eqidx = [11 43 ];
M_.mapping.eta_a.eqidx = [33 ];
M_.mapping.eta_g.eqidx = [34 ];
M_.mapping.eta_c.eqidx = [35 ];
M_.mapping.eta_m.eqidx = [38 ];
M_.mapping.eta_i.eqidx = [37 ];
M_.mapping.eta_r.eqidx = [39 ];
M_.mapping.eta_t.eqidx = [40 ];
M_.mapping.eta_p.eqidx = [36 ];
M_.mapping.eta_s.eqidx = [41 ];
M_.mapping.eta_mmu.eqidx = [42 ];
M_.mapping.eta_ms.eqidx = [43 ];
M_.static_and_dynamic_models_differ = false;
M_.has_external_function = false;
M_.block_structure.time_recursive = false;
M_.block_structure.block(1).Simulation_Type = 3;
M_.block_structure.block(1).endo_nbr = 1;
M_.block_structure.block(1).mfs = 1;
M_.block_structure.block(1).equation = [ 33];
M_.block_structure.block(1).variable = [ 33];
M_.block_structure.block(1).is_linear = false;
M_.block_structure.block(1).NNZDerivatives = 2;
M_.block_structure.block(1).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(2).Simulation_Type = 3;
M_.block_structure.block(2).endo_nbr = 1;
M_.block_structure.block(2).mfs = 1;
M_.block_structure.block(2).equation = [ 34];
M_.block_structure.block(2).variable = [ 34];
M_.block_structure.block(2).is_linear = false;
M_.block_structure.block(2).NNZDerivatives = 2;
M_.block_structure.block(2).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(3).Simulation_Type = 3;
M_.block_structure.block(3).endo_nbr = 1;
M_.block_structure.block(3).mfs = 1;
M_.block_structure.block(3).equation = [ 35];
M_.block_structure.block(3).variable = [ 35];
M_.block_structure.block(3).is_linear = false;
M_.block_structure.block(3).NNZDerivatives = 2;
M_.block_structure.block(3).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(4).Simulation_Type = 3;
M_.block_structure.block(4).endo_nbr = 1;
M_.block_structure.block(4).mfs = 1;
M_.block_structure.block(4).equation = [ 36];
M_.block_structure.block(4).variable = [ 40];
M_.block_structure.block(4).is_linear = false;
M_.block_structure.block(4).NNZDerivatives = 2;
M_.block_structure.block(4).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(5).Simulation_Type = 3;
M_.block_structure.block(5).endo_nbr = 1;
M_.block_structure.block(5).mfs = 1;
M_.block_structure.block(5).equation = [ 37];
M_.block_structure.block(5).variable = [ 37];
M_.block_structure.block(5).is_linear = false;
M_.block_structure.block(5).NNZDerivatives = 2;
M_.block_structure.block(5).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(6).Simulation_Type = 3;
M_.block_structure.block(6).endo_nbr = 1;
M_.block_structure.block(6).mfs = 1;
M_.block_structure.block(6).equation = [ 38];
M_.block_structure.block(6).variable = [ 36];
M_.block_structure.block(6).is_linear = false;
M_.block_structure.block(6).NNZDerivatives = 2;
M_.block_structure.block(6).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(7).Simulation_Type = 3;
M_.block_structure.block(7).endo_nbr = 1;
M_.block_structure.block(7).mfs = 1;
M_.block_structure.block(7).equation = [ 39];
M_.block_structure.block(7).variable = [ 38];
M_.block_structure.block(7).is_linear = false;
M_.block_structure.block(7).NNZDerivatives = 2;
M_.block_structure.block(7).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(8).Simulation_Type = 3;
M_.block_structure.block(8).endo_nbr = 1;
M_.block_structure.block(8).mfs = 1;
M_.block_structure.block(8).equation = [ 40];
M_.block_structure.block(8).variable = [ 39];
M_.block_structure.block(8).is_linear = false;
M_.block_structure.block(8).NNZDerivatives = 2;
M_.block_structure.block(8).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(9).Simulation_Type = 3;
M_.block_structure.block(9).endo_nbr = 1;
M_.block_structure.block(9).mfs = 1;
M_.block_structure.block(9).equation = [ 41];
M_.block_structure.block(9).variable = [ 41];
M_.block_structure.block(9).is_linear = false;
M_.block_structure.block(9).NNZDerivatives = 2;
M_.block_structure.block(9).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(10).Simulation_Type = 3;
M_.block_structure.block(10).endo_nbr = 1;
M_.block_structure.block(10).mfs = 1;
M_.block_structure.block(10).equation = [ 42];
M_.block_structure.block(10).variable = [ 42];
M_.block_structure.block(10).is_linear = false;
M_.block_structure.block(10).NNZDerivatives = 2;
M_.block_structure.block(10).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(11).Simulation_Type = 3;
M_.block_structure.block(11).endo_nbr = 1;
M_.block_structure.block(11).mfs = 1;
M_.block_structure.block(11).equation = [ 43];
M_.block_structure.block(11).variable = [ 43];
M_.block_structure.block(11).is_linear = false;
M_.block_structure.block(11).NNZDerivatives = 2;
M_.block_structure.block(11).bytecode_jacob_cols_to_sparse = [0 1 ];
M_.block_structure.block(12).Simulation_Type = 1;
M_.block_structure.block(12).endo_nbr = 1;
M_.block_structure.block(12).mfs = 1;
M_.block_structure.block(12).equation = [ 26];
M_.block_structure.block(12).variable = [ 19];
M_.block_structure.block(12).is_linear = true;
M_.block_structure.block(12).NNZDerivatives = 1;
M_.block_structure.block(12).bytecode_jacob_cols_to_sparse = [2 ];
M_.block_structure.block(13).Simulation_Type = 8;
M_.block_structure.block(13).endo_nbr = 25;
M_.block_structure.block(13).mfs = 23;
M_.block_structure.block(13).equation = [ 20 25 13 15 16 18 12 11 6 2 3 19 21 9 8 7 5 17 23 14 22 24 10 1 4];
M_.block_structure.block(13).variable = [ 21 22 13 20 31 2 12 32 5 1 6 4 15 3 8 10 29 9 30 18 14 7 11 16 17];
M_.block_structure.block(13).is_linear = false;
M_.block_structure.block(13).NNZDerivatives = 108;
M_.block_structure.block(13).bytecode_jacob_cols_to_sparse = [10 11 12 13 14 15 16 17 0 0 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 62 63 64 65 66 67 68 69 ];
M_.block_structure.block(14).Simulation_Type = 1;
M_.block_structure.block(14).endo_nbr = 6;
M_.block_structure.block(14).mfs = 6;
M_.block_structure.block(14).equation = [ 32 31 30 29 28 27];
M_.block_structure.block(14).variable = [ 28 27 26 25 24 23];
M_.block_structure.block(14).is_linear = true;
M_.block_structure.block(14).NNZDerivatives = 6;
M_.block_structure.block(14).bytecode_jacob_cols_to_sparse = [7 8 9 10 11 12 ];
M_.block_structure.block(1).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(1).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(1).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(3).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(3).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(3).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(4).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(4).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(4).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(5).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(5).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(5).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(6).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(6).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(6).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(7).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(7).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(7).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(8).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(8).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(8).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(9).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(9).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(9).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(10).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(10).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(10).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(11).g1_sparse_rowval = int32([1 ]);
M_.block_structure.block(11).g1_sparse_colval = int32([1 ]);
M_.block_structure.block(11).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure.block(12).g1_sparse_rowval = int32([]);
M_.block_structure.block(12).g1_sparse_colval = int32([]);
M_.block_structure.block(12).g1_sparse_colptr = int32([]);
M_.block_structure.block(13).g1_sparse_rowval = int32([22 16 20 12 7 13 16 16 13 23 16 1 18 2 4 16 18 3 19 4 10 5 6 21 2 3 6 5 7 9 14 16 6 8 11 14 21 5 9 14 16 10 22 11 17 20 10 12 16 6 13 14 14 16 15 16 4 13 16 23 6 17 19 5 18 1 4 16 19 20 1 2 4 5 7 16 18 20 1 3 12 21 23 8 9 15 22 6 23 23 15 6 1 11 15 1 6 1 3 21 23 8 15 6 14 23 ]);
M_.block_structure.block(13).g1_sparse_colval = int32([10 11 11 12 13 13 14 15 16 16 17 24 24 25 25 25 25 26 26 27 27 28 28 28 29 29 29 30 30 30 30 30 31 31 31 31 31 32 32 32 32 33 33 34 34 34 35 35 35 36 36 36 37 37 38 38 39 39 39 39 40 40 40 41 41 42 42 42 42 42 43 43 43 43 43 43 43 43 44 44 44 44 44 45 45 45 45 46 46 62 63 64 65 65 65 66 66 67 67 67 67 68 68 69 69 69 ]);
M_.block_structure.block(13).g1_sparse_colptr = int32([1 1 1 1 1 1 1 1 1 1 2 4 5 7 8 9 11 12 12 12 12 12 12 12 14 18 20 22 25 28 33 38 42 44 47 50 53 55 57 61 64 66 71 79 84 88 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 91 92 93 96 98 102 104 107 ]);
M_.block_structure.block(14).g1_sparse_rowval = int32([]);
M_.block_structure.block(14).g1_sparse_colval = int32([]);
M_.block_structure.block(14).g1_sparse_colptr = int32([]);
M_.block_structure.variable_reordered = [ 33 34 35 40 37 36 38 39 41 42 43 19 21 22 13 20 31 2 12 32 5 1 6 4 15 3 8 10 29 9 30 18 14 7 11 16 17 28 27 26 25 24 23];
M_.block_structure.equation_reordered = [ 33 34 35 36 37 38 39 40 41 42 43 26 20 25 13 15 16 18 12 11 6 2 3 19 21 9 8 7 5 17 23 14 22 24 10 1 4 32 31 30 29 28 27];
M_.block_structure.incidence(1).lead_lag = -1;
M_.block_structure.incidence(1).sparse_IM = [
 1 4;
 4 9;
 6 8;
 8 8;
 8 9;
 9 3;
 17 10;
 17 15;
 17 29;
 17 30;
 24 15;
 27 7;
 28 2;
 29 9;
 32 10;
 33 33;
 34 34;
 35 35;
 36 40;
 37 37;
 38 36;
 39 38;
 40 39;
 41 41;
 42 42;
 43 43;
];
M_.block_structure.incidence(2).lead_lag = 0;
M_.block_structure.incidence(2).sparse_IM = [
 1 4;
 1 16;
 1 35;
 2 1;
 2 16;
 3 5;
 3 6;
 3 16;
 4 9;
 4 11;
 4 17;
 4 37;
 5 16;
 5 29;
 5 41;
 6 5;
 6 7;
 6 33;
 7 1;
 7 5;
 7 6;
 7 8;
 7 10;
 7 36;
 8 8;
 8 9;
 8 37;
 9 3;
 9 11;
 9 35;
 10 1;
 10 11;
 10 12;
 11 1;
 11 8;
 11 12;
 11 17;
 11 30;
 11 32;
 11 36;
 11 43;
 12 5;
 12 6;
 12 7;
 12 12;
 12 18;
 13 7;
 13 11;
 13 13;
 13 14;
 14 7;
 14 13;
 14 18;
 14 19;
 14 20;
 15 7;
 15 19;
 15 20;
 15 32;
 16 11;
 16 31;
 16 32;
 17 3;
 17 5;
 17 6;
 17 7;
 17 9;
 17 10;
 17 14;
 17 19;
 17 20;
 17 21;
 17 29;
 18 2;
 18 7;
 18 9;
 18 14;
 18 20;
 18 22;
 19 2;
 19 3;
 19 4;
 20 7;
 20 20;
 20 21;
 21 1;
 21 15;
 22 14;
 22 30;
 22 31;
 23 15;
 23 30;
 24 7;
 24 14;
 24 15;
 24 38;
 25 22;
 25 34;
 26 19;
 26 39;
 27 7;
 27 23;
 28 2;
 28 24;
 29 9;
 29 25;
 30 14;
 30 26;
 31 15;
 31 27;
 32 10;
 32 28;
 33 33;
 34 34;
 35 35;
 36 40;
 37 37;
 38 36;
 39 38;
 40 39;
 41 41;
 42 42;
 43 43;
];
M_.block_structure.incidence(3).lead_lag = 1;
M_.block_structure.incidence(3).sparse_IM = [
 2 16;
 4 9;
 4 11;
 4 17;
 4 37;
 5 14;
 5 16;
 5 30;
 7 17;
 10 11;
 11 7;
 11 17;
 11 18;
 13 7;
 13 11;
 13 14;
 16 11;
 21 14;
];
M_.block_structure.dyn_tmp_nbr = 23;
M_.state_var = [33 34 35 40 37 36 38 39 41 42 43 2 4 15 3 8 10 29 9 30 7 ];
M_.maximum_lag = 1;
M_.maximum_lead = 1;
M_.maximum_endo_lag = 1;
M_.maximum_endo_lead = 1;
oo_.steady_state = zeros(43, 1);
M_.maximum_exo_lag = 0;
M_.maximum_exo_lead = 0;
oo_.exo_steady_state = zeros(11, 1);
M_.params = NaN(44, 1);
M_.endo_trends = struct('deflator', cell(43, 1), 'log_deflator', cell(43, 1), 'growth_factor', cell(43, 1), 'log_growth_factor', cell(43, 1));
M_.NNZDerivatives = [178; -1; -1; ];
M_.dynamic_g1_sparse_rowval = int32([28 9 1 27 6 8 4 8 29 17 32 17 24 17 17 33 34 35 38 37 39 40 36 41 42 43 2 7 10 11 21 18 19 28 9 17 19 1 19 3 6 7 12 17 3 7 12 17 6 12 13 14 15 17 18 20 24 27 7 8 11 4 8 17 18 29 7 17 32 4 9 10 13 16 10 11 12 13 14 13 17 18 22 24 30 21 23 24 31 1 2 3 5 4 11 12 14 14 15 17 26 14 15 17 18 20 17 20 18 25 27 28 29 30 31 32 5 17 11 22 23 16 22 11 15 16 6 33 25 34 1 9 35 7 11 38 4 8 37 24 39 26 40 36 5 41 42 11 43 11 13 4 4 10 13 16 5 13 21 2 5 4 7 11 11 5 4 33 34 35 38 37 39 40 36 41 42 43 ]);
M_.dynamic_g1_sparse_colval = int32([2 3 4 7 8 8 9 9 9 10 10 15 15 29 30 33 34 35 36 37 38 39 40 41 42 43 44 44 44 44 44 45 45 45 46 46 46 47 47 48 48 48 48 48 49 49 49 49 50 50 50 50 50 50 50 50 50 50 51 51 51 52 52 52 52 52 53 53 53 54 54 54 54 54 55 55 55 56 56 57 57 57 57 57 57 58 58 58 58 59 59 59 59 60 60 61 61 62 62 62 62 63 63 63 63 63 64 64 65 65 66 67 68 69 70 71 72 72 73 73 73 74 74 75 75 75 76 76 77 77 78 78 78 79 79 79 80 80 80 81 81 82 82 83 84 84 85 86 86 93 93 95 97 97 97 97 100 100 100 102 102 103 103 103 104 116 123 130 131 132 133 134 135 136 137 138 139 140 ]);
M_.dynamic_g1_sparse_colptr = int32([1 1 2 3 4 4 4 5 7 10 12 12 12 12 12 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 16 16 16 17 18 19 20 21 22 23 24 25 26 27 32 35 38 40 45 49 59 62 67 70 75 78 80 86 90 94 96 98 102 107 109 111 112 113 114 115 116 117 119 122 124 127 129 131 134 137 140 142 144 145 147 148 150 150 150 150 150 150 150 152 152 153 153 157 157 157 160 160 162 165 166 166 166 166 166 166 166 166 166 166 166 166 167 167 167 167 167 167 167 168 168 168 168 168 168 168 169 170 171 172 173 174 175 176 177 178 179 ]);
M_.lhs = {
'lb_H'; 
'beta_H*lb_H(1)/lb_H*rr'; 
'lb_H*w'; 
'e_i*q'; 
'beta_H*lb_H(1)/lb_H*r_s(1)/pi(1)+e_s*chi_s/lb_H*b_s^(-sigmaS)'; 
'y'; 
'l'; 
'e_i*i*(1-kappa/2*(i/i(-1)-1)^2)'; 
'lb_E'; 
'1-phi_E'; 
'(1-phi_E)*(q(1)*(1-delta)+alpha*varrho(1)*y(1)/k)+mk*e_m*q(1)*phi_E+q(1)*phiS*e_ms*ms/r_s'; 
'w'; 
'1-epsilon+epsilon*mc-psi*pi*(pi-(pi))+pi(1)*y(1)*lb_E(1)*beta_E*psi/lb_E/y*(pi(1)-(pi))'; 
'varrho'; 
'((tau*sig*y^(1-varphi)+phiS*mmu)/(theta1*theta2))^(1/(theta2-1))'; 
'1-phiS'; 
'i+c_E+w*h+r(-1)/pi*l(-1)+r_s(-1)/pi*b_s(-1)+y*theta1*mu^theta2+tau*e'; 
'y'; 
'c'; 
'e'; 
'rr'; 
'rrs'; 
'r_s'; 
'r'; 
'g'; 
'tau'; 
'gy_obs'; 
'gc_obs'; 
'gi_obs'; 
'pi_obs'; 
'r_obs'; 
'l_obs'; 
'log(e_a)'; 
'log(e_g)'; 
'log(e_c)'; 
'log(e_p)'; 
'log(e_i)'; 
'log(e_m)'; 
'log(e_r)'; 
'log(e_t)'; 
'log(e_s)'; 
'log(e_mmu)'; 
'log(e_ms)'; 
};
M_.static_tmp_nbr = [16; 4; 0; 0; ];
M_.block_structure_stat.block(1).Simulation_Type = 3;
M_.block_structure_stat.block(1).endo_nbr = 1;
M_.block_structure_stat.block(1).mfs = 1;
M_.block_structure_stat.block(1).equation = [ 2];
M_.block_structure_stat.block(1).variable = [ 1];
M_.block_structure_stat.block(2).Simulation_Type = 3;
M_.block_structure_stat.block(2).endo_nbr = 1;
M_.block_structure_stat.block(2).mfs = 1;
M_.block_structure_stat.block(2).equation = [ 10];
M_.block_structure_stat.block(2).variable = [ 12];
M_.block_structure_stat.block(3).Simulation_Type = 1;
M_.block_structure_stat.block(3).endo_nbr = 4;
M_.block_structure_stat.block(3).mfs = 4;
M_.block_structure_stat.block(3).equation = [ 27 28 29 32];
M_.block_structure_stat.block(3).variable = [ 23 24 25 28];
M_.block_structure_stat.block(4).Simulation_Type = 3;
M_.block_structure_stat.block(4).endo_nbr = 1;
M_.block_structure_stat.block(4).mfs = 1;
M_.block_structure_stat.block(4).equation = [ 33];
M_.block_structure_stat.block(4).variable = [ 33];
M_.block_structure_stat.block(5).Simulation_Type = 3;
M_.block_structure_stat.block(5).endo_nbr = 1;
M_.block_structure_stat.block(5).mfs = 1;
M_.block_structure_stat.block(5).equation = [ 34];
M_.block_structure_stat.block(5).variable = [ 34];
M_.block_structure_stat.block(6).Simulation_Type = 3;
M_.block_structure_stat.block(6).endo_nbr = 1;
M_.block_structure_stat.block(6).mfs = 1;
M_.block_structure_stat.block(6).equation = [ 35];
M_.block_structure_stat.block(6).variable = [ 35];
M_.block_structure_stat.block(7).Simulation_Type = 3;
M_.block_structure_stat.block(7).endo_nbr = 1;
M_.block_structure_stat.block(7).mfs = 1;
M_.block_structure_stat.block(7).equation = [ 36];
M_.block_structure_stat.block(7).variable = [ 40];
M_.block_structure_stat.block(8).Simulation_Type = 3;
M_.block_structure_stat.block(8).endo_nbr = 1;
M_.block_structure_stat.block(8).mfs = 1;
M_.block_structure_stat.block(8).equation = [ 37];
M_.block_structure_stat.block(8).variable = [ 37];
M_.block_structure_stat.block(9).Simulation_Type = 3;
M_.block_structure_stat.block(9).endo_nbr = 1;
M_.block_structure_stat.block(9).mfs = 1;
M_.block_structure_stat.block(9).equation = [ 38];
M_.block_structure_stat.block(9).variable = [ 36];
M_.block_structure_stat.block(10).Simulation_Type = 3;
M_.block_structure_stat.block(10).endo_nbr = 1;
M_.block_structure_stat.block(10).mfs = 1;
M_.block_structure_stat.block(10).equation = [ 39];
M_.block_structure_stat.block(10).variable = [ 38];
M_.block_structure_stat.block(11).Simulation_Type = 3;
M_.block_structure_stat.block(11).endo_nbr = 1;
M_.block_structure_stat.block(11).mfs = 1;
M_.block_structure_stat.block(11).equation = [ 40];
M_.block_structure_stat.block(11).variable = [ 39];
M_.block_structure_stat.block(12).Simulation_Type = 3;
M_.block_structure_stat.block(12).endo_nbr = 1;
M_.block_structure_stat.block(12).mfs = 1;
M_.block_structure_stat.block(12).equation = [ 41];
M_.block_structure_stat.block(12).variable = [ 41];
M_.block_structure_stat.block(13).Simulation_Type = 3;
M_.block_structure_stat.block(13).endo_nbr = 1;
M_.block_structure_stat.block(13).mfs = 1;
M_.block_structure_stat.block(13).equation = [ 42];
M_.block_structure_stat.block(13).variable = [ 42];
M_.block_structure_stat.block(14).Simulation_Type = 3;
M_.block_structure_stat.block(14).endo_nbr = 1;
M_.block_structure_stat.block(14).mfs = 1;
M_.block_structure_stat.block(14).equation = [ 43];
M_.block_structure_stat.block(14).variable = [ 43];
M_.block_structure_stat.block(15).Simulation_Type = 1;
M_.block_structure_stat.block(15).endo_nbr = 1;
M_.block_structure_stat.block(15).mfs = 1;
M_.block_structure_stat.block(15).equation = [ 26];
M_.block_structure_stat.block(15).variable = [ 19];
M_.block_structure_stat.block(16).Simulation_Type = 6;
M_.block_structure_stat.block(16).endo_nbr = 22;
M_.block_structure_stat.block(16).mfs = 22;
M_.block_structure_stat.block(16).equation = [ 19 20 21 22 23 24 25 18 3 4 5 17 16 6 7 8 15 1 11 12 13 14];
M_.block_structure_stat.block(16).variable = [ 4 21 14 30 15 7 22 2 6 17 29 3 31 5 10 9 32 16 8 18 13 20];
M_.block_structure_stat.block(17).Simulation_Type = 1;
M_.block_structure_stat.block(17).endo_nbr = 3;
M_.block_structure_stat.block(17).mfs = 3;
M_.block_structure_stat.block(17).equation = [ 9 31 30];
M_.block_structure_stat.block(17).variable = [ 11 27 26];
M_.block_structure_stat.variable_reordered = [ 1 12 23 24 25 28 33 34 35 40 37 36 38 39 41 42 43 19 4 21 14 30 15 7 22 2 6 17 29 3 31 5 10 9 32 16 8 18 13 20 11 27 26];
M_.block_structure_stat.equation_reordered = [ 2 10 27 28 29 32 33 34 35 36 37 38 39 40 41 42 43 26 19 20 21 22 23 24 25 18 3 4 5 17 16 6 7 8 15 1 11 12 13 14 9 31 30];
M_.block_structure_stat.incidence.sparse_IM = [
 1 4;
 1 16;
 1 35;
 2 1;
 3 5;
 3 6;
 3 16;
 4 17;
 4 37;
 5 14;
 5 16;
 5 29;
 5 30;
 5 41;
 6 5;
 6 7;
 6 8;
 6 33;
 7 1;
 7 5;
 7 6;
 7 8;
 7 10;
 7 17;
 7 36;
 8 8;
 8 9;
 8 37;
 9 3;
 9 11;
 9 35;
 10 1;
 10 12;
 11 1;
 11 7;
 11 8;
 11 12;
 11 17;
 11 18;
 11 30;
 11 32;
 11 36;
 11 43;
 12 5;
 12 6;
 12 7;
 12 12;
 12 18;
 13 13;
 13 14;
 14 7;
 14 13;
 14 18;
 14 19;
 14 20;
 15 7;
 15 19;
 15 20;
 15 32;
 16 31;
 16 32;
 17 3;
 17 5;
 17 6;
 17 7;
 17 9;
 17 10;
 17 14;
 17 15;
 17 19;
 17 20;
 17 21;
 17 29;
 17 30;
 18 2;
 18 7;
 18 9;
 18 20;
 18 22;
 19 2;
 19 3;
 19 4;
 20 7;
 20 20;
 20 21;
 21 1;
 21 14;
 21 15;
 22 14;
 22 30;
 22 31;
 23 15;
 23 30;
 24 7;
 24 14;
 24 15;
 24 38;
 25 7;
 25 22;
 25 34;
 26 19;
 26 39;
 27 23;
 28 24;
 29 25;
 30 26;
 31 27;
 32 28;
 33 33;
 34 34;
 35 35;
 36 40;
 37 37;
 38 36;
 39 38;
 40 39;
 41 41;
 42 42;
 43 43;
];
M_.block_structure_stat.tmp_nbr = 29;
M_.block_structure_stat.block(1).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(1).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(2).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(2).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(3).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(3).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(3).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(4).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(4).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(5).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(5).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(6).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(6).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(7).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(7).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(8).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(8).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(9).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(9).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(9).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(10).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(10).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(10).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(11).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(11).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(11).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(12).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(12).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(12).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(13).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(13).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(13).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(14).g1_sparse_rowval = int32([1 ]);
M_.block_structure_stat.block(14).g1_sparse_colval = int32([1 ]);
M_.block_structure_stat.block(14).g1_sparse_colptr = int32([1 2 ]);
M_.block_structure_stat.block(15).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(15).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(15).g1_sparse_colptr = int32([]);
M_.block_structure_stat.block(16).g1_sparse_rowval = int32([1 18 2 12 3 4 6 11 12 21 4 5 11 12 19 3 5 6 12 2 6 7 8 12 14 17 19 20 22 7 8 1 8 9 12 15 20 10 15 19 11 12 1 12 4 13 9 12 14 15 20 12 15 8 12 16 13 17 19 9 11 18 14 15 16 19 19 20 22 21 22 2 8 12 17 22 ]);
M_.block_structure_stat.block(16).g1_sparse_colval = int32([1 1 2 2 3 3 3 3 3 3 4 4 4 4 4 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 8 8 9 9 9 9 10 10 10 11 11 12 12 13 13 14 14 14 14 14 15 15 16 16 16 17 17 17 18 18 18 19 19 19 19 20 20 20 21 21 22 22 22 22 22 ]);
M_.block_structure_stat.block(16).g1_sparse_colptr = int32([1 3 5 11 16 20 30 32 34 38 41 43 45 47 52 54 57 60 63 67 70 72 77 ]);
M_.block_structure_stat.block(17).g1_sparse_rowval = int32([]);
M_.block_structure_stat.block(17).g1_sparse_colval = int32([]);
M_.block_structure_stat.block(17).g1_sparse_colptr = int32([]);
M_.static_g1_sparse_rowval = int32([2 7 10 11 21 18 19 9 17 19 1 19 3 6 7 12 17 3 7 12 17 6 11 12 14 15 17 18 20 24 25 6 7 8 11 8 17 18 7 17 9 10 11 12 13 14 5 13 17 21 22 24 17 21 23 24 1 3 5 4 7 11 11 12 14 14 15 17 26 14 15 17 18 20 17 20 18 25 27 28 29 30 31 32 5 17 5 11 17 22 23 16 22 11 15 16 6 33 25 34 1 9 35 7 11 38 4 8 37 24 39 26 40 36 5 41 42 11 43 ]);
M_.static_g1_sparse_colval = int32([1 1 1 1 1 2 2 3 3 3 4 4 5 5 5 5 5 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 9 9 9 10 10 11 12 12 12 13 13 14 14 14 14 14 14 15 15 15 15 16 16 16 17 17 17 18 18 18 19 19 19 19 20 20 20 20 20 21 21 22 22 23 24 25 26 27 28 29 29 30 30 30 30 30 31 31 32 32 32 33 33 34 34 35 35 35 36 36 36 37 37 37 38 38 39 39 40 41 41 42 43 43 ]);
M_.static_g1_sparse_colptr = int32([1 6 8 11 13 18 22 32 36 39 41 42 45 47 53 57 60 63 66 70 75 77 79 80 81 82 83 84 85 87 92 94 97 99 101 104 107 110 112 114 115 117 118 120 ]);
close all;
M_.params(2) = 0.993;
beta_H = M_.params(2);
M_.params(1) = 0.980;
beta_E = M_.params(1);
M_.params(3) = 0.025;
delta = M_.params(3);
M_.params(4) = 0.30;
alpha = M_.params(4);
M_.params(8) = 0.2;
gy = M_.params(8);
M_.params(12) = 0.7;
hh = M_.params(12);
M_.params(5) = 1;
sigmaC = M_.params(5);
M_.params(6) = 1;
sigmaL = M_.params(6);
M_.params(11) = 0.8;
mk = M_.params(11);
M_.params(10) = 0.1;
mh = M_.params(10);
M_.params(13) = 10;
epsilon = M_.params(13);
M_.params(15) = .8;
rho = M_.params(15);
M_.params(16) = 0;
phi_y = M_.params(16);
M_.params(17) = 1.5;
phi_pi = M_.params(17);
M_.params(18) = 80;
psi = M_.params(18);
M_.params(14) = 4;
kappa = M_.params(14);
M_.params(31) = 0.2;
varphi = M_.params(31);
M_.params(19) = 1.005;
piss = M_.params(19);
M_.params(38) = 8.9300;
sigmaS = M_.params(38);
M_.params(37) = 15;
chi_s = M_.params(37);
M_.params(40) = 0.05;
BDratio = M_.params(40);
M_.params(32) = 0.1;
tau0 = M_.params(32);
M_.params(28) = 0.2;
sig = M_.params(28);
M_.params(33) = 25;
y0 = M_.params(33);
M_.params(29) = 0.05;
theta1 = M_.params(29);
M_.params(30) = 2.6;
theta2 = M_.params(30);
M_.params(20) = 0.95;
rho_a = M_.params(20);
M_.params(21) = 0.95;
rho_g = M_.params(21);
M_.params(22) = 0.95;
rho_c = M_.params(22);
M_.params(23) = 0.95;
rho_m = M_.params(23);
M_.params(24) = 0.95;
rho_i = M_.params(24);
M_.params(25) = 0.40;
rho_r = M_.params(25);
M_.params(26) = 0.40;
rho_t = M_.params(26);
M_.params(27) = 0.90;
rho_p = M_.params(27);
M_.params(39) = 0.90;
rho_s = M_.params(39);
M_.params(44) = 0.90;
rho_ms = M_.params(44);
M_.params(42) = 0.90;
rho_mmu = M_.params(42);
M_.params(34) = 0.25;
stepup = M_.params(34);
M_.params(35) = 0.02;
p_s = M_.params(35);
M_.params(36) = 0.3;
gamma = M_.params(36);
M_.params(43) = 0.8;
ms = M_.params(43);
M_.params(41) = 0.1;
mmu = M_.params(41);
steady;
options_resid_ = struct();
display_static_residuals(M_, options_, oo_, options_resid_);
if isempty(estim_params_)
    estim_params_.var_exo = zeros(0, 10);
    estim_params_.var_endo = zeros(0, 10);
    estim_params_.corrx = zeros(0, 11);
    estim_params_.corrn = zeros(0, 11);
    estim_params_.param_vals = zeros(0, 10);
end
if ~isempty(find(estim_params_.var_exo(:,1)==2))
    error('The standard deviation for eta_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 2, NaN, NaN, NaN, 4, .01, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==21))
    error('Parameter rho_g has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 21, .92, NaN, NaN, 1, .5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==8))
    error('The standard deviation for eta_p has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 8, NaN, NaN, NaN, 4, .01, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==27))
    error('Parameter rho_p has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 27, .92, NaN, NaN, 1, .5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==6))
    error('The standard deviation for eta_r has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 6, NaN, NaN, NaN, 4, .01, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==25))
    error('Parameter rho_r has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 25, .5, NaN, NaN, 1, .5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==3))
    error('The standard deviation for eta_c has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 3, NaN, NaN, NaN, 4, .01, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==22))
    error('Parameter rho_c has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 22, .96, NaN, NaN, 1, .5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==5))
    error('The standard deviation for eta_i has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 5, NaN, NaN, NaN, 4, .01, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==24))
    error('Parameter rho_i has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 24, .9, NaN, NaN, 1, .5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==4))
    error('The standard deviation for eta_m has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 4, NaN, NaN, NaN, 4, .01, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==23))
    error('Parameter rho_m has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 23, .96, NaN, NaN, 1, .5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==1))
    error('The standard deviation for eta_a has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 1, NaN, NaN, NaN, 4, .01, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==20))
    error('Parameter rho_a has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 20, .9, NaN, NaN, 1, .5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.var_exo(:,1)==7))
    error('The standard deviation for eta_t has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.var_exo = [estim_params_.var_exo; 7, NaN, NaN, NaN, 4, .01, 2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==26))
    error('Parameter rho_t has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 26, .9, NaN, NaN, 1, .5, 0.2, NaN, NaN, NaN ];
if ~isempty(find(estim_params_.param_vals(:,1)==15))
    error('Parameter rho has been specified twice in two concatenated ''estimated_params'' blocks. Depending on your intention, you may want to use the ''overwrite'' option or an ''estimated_params_remove'' block.')
end
estim_params_.param_vals = [estim_params_.param_vals; 15, .45, NaN, NaN, 1, .75, 0.1, NaN, NaN, NaN ];
%
% SHOCKS instructions
%
M_.exo_det_length = 0;
M_.Sigma_e(1, 1) = (1)^2;
M_.Sigma_e(4, 4) = (1)^2;
options_.irf = 30;
options_.order = 1;
var_list_ = {'y';'c_H';'c_E';'i';'pi';'r';'q';'e';'phi_E'};
[info, oo_, options_, M_] = stoch_simul(M_, options_, oo_, var_list_);


oo_.time = toc(tic0);
disp(['Total computing time : ' dynsec2hms(oo_.time) ]);
if ~exist([M_.dname filesep 'Output'],'dir')
    mkdir(M_.dname,'Output');
end
save([M_.dname filesep 'Output' filesep 'SLBnum_results.mat'], 'oo_', 'M_', 'options_');
if exist('estim_params_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SLBnum_results.mat'], 'estim_params_', '-append');
end
if exist('bayestopt_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SLBnum_results.mat'], 'bayestopt_', '-append');
end
if exist('dataset_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SLBnum_results.mat'], 'dataset_', '-append');
end
if exist('estimation_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SLBnum_results.mat'], 'estimation_info', '-append');
end
if exist('dataset_info', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SLBnum_results.mat'], 'dataset_info', '-append');
end
if exist('oo_recursive_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SLBnum_results.mat'], 'oo_recursive_', '-append');
end
if exist('options_mom_', 'var') == 1
  save([M_.dname filesep 'Output' filesep 'SLBnum_results.mat'], 'options_mom_', '-append');
end
if ~isempty(lastwarn)
  disp('Note: warning(s) encountered in MATLAB/Octave code')
end
